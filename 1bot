import { makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion, DisconnectReason } from "@whiskeysockets/baileys";
import fetch from "node-fetch";
import fs from "fs";
import { GoogleGenerativeAI } from "@google/generative-ai";

// === Konfigurasi API ===
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "AIzaSyBbAm_P00dnbtKQm6692Z1w1ymqjvdHSS0";
const ELEVENLABS_API_KEY = process.env.ELEVENLABS_API_KEY || "sk_89232d9094e3036b6db5437fba8f0bbf9c929117e589ccce";
const ELEVENLABS_VOICE_ID = process.env.ELEVENLABS_VOICE_ID || "I7sakys8pBZ1Z5f0UhT9";

// === Init Gemini ===
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

async function askGemini(prompt) {
  try {
    const result = await model.generateContent(prompt);
    return result.response.text();
  } catch (e) {
    console.error("❌ Gemini Error:", e);
    return "Maaf, aku gagal menjawab.";
  }
}

// === ElevenLabs TTS ===
async function textToSpeech(text, outFile) {
  try {
    const url = `https://api.elevenlabs.io/v1/text-to-speech/${ELEVENLABS_VOICE_ID}`;
    const res = await fetch(url, {
      method: "POST",
      headers: {
        "xi-api-key": ELEVENLABS_API_KEY,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        text,
        model_id: "eleven_multilingual_v2",
        voice_settings: { stability: 0.7, similarity_boost: 0.7 },
      }),
    });

    if (!res.ok) throw new Error(await res.text());
    const buffer = Buffer.from(await res.arrayBuffer());
    fs.writeFileSync(outFile, buffer);
    return outFile;
  } catch (e) {
    console.error("❌ ElevenLabs Error:", e);
    return null;
  }
}

// === Bot WA ===
async function startBot() {
  const { state, saveCreds } = await useMultiFileAuthState("auth");
  const { version } = await fetchLatestBaileysVersion();

  const sock = makeWASocket({
    version,
    printQRInTerminal: true,
    auth: state,
  });

  sock.ev.on("creds.update", saveCreds);

  sock.ev.on("messages.upsert", async ({ messages, type }) => {
    if (type !== "notify") return;
    const msg = messages[0];
    if (!msg.message) return;

    const from = msg.key.remoteJid;
    const sender = msg.key.participant || msg.key.remoteJid;
    const text =
      msg.message.conversation ||
      msg.message.extendedTextMessage?.text ||
      msg.message.imageMessage?.caption ||
      "";

    console.log("📩 Pesan diterima:", text);

    if (!text) return;

    const lower = text.toLowerCase();

    // === Perintah "moli ..." ===
    if (lower.includes("moli")) {
      if (lower.includes("nyanyi")) {
        // --- Nyanyi pakai Gemini ---
        const prompt = text.replace(/moli/gi, "").replace(/nyanyi/gi, "").trim() || "lagu bebas";
        const aiLyrics = await askGemini(`Buatkan lirik lagu pendek tentang: ${prompt}`);
        const file = await textToSpeech(aiLyrics, "nyanyi.mp3");
        if (file) {
          await sock.sendMessage(from, {
            audio: fs.readFileSync(file),
            mimetype: "audio/mp4",
            ptt: true,
            mentions: [sender],
          }, { quoted: msg });
        }
      } else if (lower.includes("suara")) {
        // --- Suara pakai Gemini ---
        const prompt = text.replace(/moli/gi, "").replace(/suara/gi, "").trim() || "apa kabar";
        const aiText = await askGemini(`Ucapkan ini dengan suara: ${prompt}`);
        const file = await textToSpeech(aiText, "suara.mp3");
        if (file) {
          await sock.sendMessage(from, {
            audio: fs.readFileSync(file),
            mimetype: "audio/mp4",
            ptt: true,
            mentions: [sender],
          }, { quoted: msg });
        }
      } else {
        // --- Chat normal ---
        const reply = await askGemini(text);
        await sock.sendMessage(from, { text: `@${sender.split("@")[0]} ${reply}`, mentions: [sender] }, { quoted: msg });
      }
    }
  });

  sock.ev.on("connection.update", (update) => {
    const { connection, lastDisconnect } = update;
    if (connection === "close") {
      if (lastDisconnect.error?.output?.statusCode !== DisconnectReason.loggedOut) {
        startBot();
      }
    } else if (connection === "open") {
      console.log("✅ Bot connected");
    }
  });
}

startBot();
   

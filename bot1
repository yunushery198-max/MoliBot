import { makeWASocket, useMultiFileAuthState } from "@whiskeysockets/baileys";
import fetch from "node-fetch";
import fs from "fs";
import { exec } from "child_process";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";

dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function startBot() {
  const { state, saveCreds } = await useMultiFileAuthState("session");
  const sock = makeWASocket({
    auth: state,
    printQRInTerminal: true,
  });

  sock.ev.on("creds.update", saveCreds);

  // === Init Gemini ===
  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

  // === ElevenLabs TTS ===
  async function textToSpeechElevenLabs(text, sender, remoteJid, quoted) {
    const audioPathMp3 = path.join(__dirname, "voice.mp3");
    const audioPathOgg = path.join(__dirname, "voice.ogg");

    try {
      const response = await fetch(
        `https://api.elevenlabs.io/v1/text-to-speech/${process.env.ELEVENLABS_VOICE_ID}`,
        {
          method: "POST",
          headers: {
            "xi-api-key": process.env.ELEVENLABS_API_KEY,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            text,
            model_id: "eleven_multilingual_v2",
          }),
        }
      );

      if (!response.ok) {
        throw new Error(`ElevenLabs error: ${response.statusText}`);
      }

      const buffer = Buffer.from(await response.arrayBuffer());
      fs.writeFileSync(audioPathMp3, buffer);

      // Convert MP3 → OGG Opus
      await new Promise((resolve, reject) => {
        exec(
          `ffmpeg -y -i "${audioPathMp3}" -c:a libopus -b:a 64k "${audioPathOgg}"`,
          (err) => (err ? reject(err) : resolve())
        );
      });

      // Kirim VN dengan reply + mention
      await sock.sendMessage(remoteJid, {
        audio: fs.readFileSync(audioPathOgg),
        mimetype: "audio/ogg; codecs=opus",
        ptt: true,
        mentions: [sender],
        contextInfo: { mentionedJid: [sender] },
      }, { quoted });

      fs.unlinkSync(audioPathMp3);
      fs.unlinkSync(audioPathOgg);
    } catch (err) {
      console.error("TTS Error:", err);
      await sock.sendMessage(remoteJid, {
        text: `❌ Gagal membuat suara: ${err.message}`,
        mentions: [sender],
        contextInfo: { mentionedJid: [sender] },
      }, { quoted });
    }
  }

  // === Handler pesan masuk ===
  sock.ev.on("messages.upsert", async ({ messages }) => {
    const m = messages[0];
    if (!m.message) return;

    const sender = m.key.participant || m.key.remoteJid;
    const remoteJid = m.key.remoteJid;

    // Ambil teks pesan
    let body = "";
    if (m.message.conversation) body = m.message.conversation;
    if (m.message.extendedTextMessage) body = m.message.extendedTextMessage.text;

    console.log("Pesan masuk:", body);

    if (!body) return;

    // === Perintah ===
    if (body.toLowerCase().startsWith("text ")) {
      const text = body.slice(5).trim();

      try {
        const result = await model.generateContent(text);
        const aiReply = result.response.text();

        await sock.sendMessage(remoteJid, {
          text: `@${sender.split("@")[0]} ${aiReply}`,
          mentions: [sender],
          contextInfo: { mentionedJid: [sender] },
        }, { quoted: m });
      } catch (err) {
        console.error("Gemini Error:", err);
        await sock.sendMessage(remoteJid, {
          text: `❌ Gagal ambil jawaban dari AI`,
          mentions: [sender],
          contextInfo: { mentionedJid: [sender] },
        }, { quoted: m });
      }
    }

    if (body.toLowerCase().startsWith("suara ")) {
      const text = body.slice(6).trim();
      await textToSpeechElevenLabs(text, sender, remoteJid, m);
    }

    if (body.toLowerCase().startsWith("nyanyi ")) {
      const text = body.slice(7).trim();
      await textToSpeechElevenLabs(text, sender, remoteJid, m);
    }
  });
}

startBot();

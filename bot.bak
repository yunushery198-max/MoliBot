require("dotenv").config();
const fs = require("fs");
const path = require("path");
const {
  default: makeWASocket,
  useMultiFileAuthState,
} = require("@whiskeysockets/baileys");

const commands = new Map();

// 🔄 Loader command
function loadCommands() {
  commands.clear();
  const cmdFiles = fs.readdirSync(path.join(__dirname, "commands")).filter(f => f.endsWith(".cjs"));

  for (const file of cmdFiles) {
    try {
      delete require.cache[require.resolve(`./commands/${file}`)];
      const cmd = require(`./commands/${file}`);
      if (cmd?.name && typeof cmd.execute === "function") {
        commands.set(cmd.name, cmd);
        console.log(`✅ Loaded command: ${cmd.name}`);
      }
    } catch (err) {
      console.error(`❌ Failed to load ${file}:`, err.message);
    }
  }
  return commands;
}

// 🔌 Start bot
async function startBot() {
  const { state, saveCreds } = await useMultiFileAuthState("auth");
  const sock = makeWASocket({
    auth: state,
    printQRInTerminal: true,
  });

  loadCommands();

  // 🔥 Jalankan init() untuk command yang punya init (misal safety.cjs)
  for (const cmd of commands.values()) {
    if (typeof cmd.init === "function") {
      try {
        cmd.init(sock);
        console.log(`⚡ Init dijalankan untuk command: ${cmd.name}`);
      } catch (err) {
        console.error(`❌ Gagal init ${cmd.name}:`, err.message);
      }
    }
  }

  sock.ev.on("creds.update", saveCreds);

  sock.ev.on("messages.upsert", async ({ messages }) => {
    const m = messages[0];
    if (!m.message || !m.key.remoteJid) return;

    const text = m.message.conversation || m.message.extendedTextMessage?.text || "";
    if (!text.startsWith(".")) return;

    const args = text.slice(1).trim().split(" ");
    const cmdName = args.shift().toLowerCase();

    const command = commands.get(cmdName);
    if (!command) return;

    try {
      // 🚀 Selalu kirim parameter lengkap
      await command.execute(sock, m, args, commands, loadCommands);
    } catch (err) {
      console.error(`❌ Error in ${cmdName}:`, err.message);
      await sock.sendMessage(m.key.remoteJid, { text: `❌ Error: ${err.message}` });
    }
  });

  console.log("✅ Connected to WhatsApp");
}

startBot();

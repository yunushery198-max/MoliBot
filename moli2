// ================== moli-bot ==================
// Fitur Utama:
// 1. Perintah Moli (AI Text, Suara, Nyanyi, Play Music)
// 2. Rate limit 10 detik global
// 3. Queue system utk Voice/Nyanyi/Music
// 4. Respon random sesuai kategori
// 5. Auto delete file TTS setelah 10 menit
// 6. Promo tiap 1 jam (khusus grup)
// 7. Jadwal sholat otomatis (WITA & WIB)
// 8. Panggil user di grup
// 9. Perintah "moli help" untuk lihat semua command
// =================================================

import {
  makeWASocket,
  DisconnectReason,
  fetchLatestBaileysVersion,
  useMultiFileAuthState
} from "@whiskeysockets/baileys"
import qrcode from "qrcode-terminal"
import fetch from "node-fetch"
import fs from "fs"
import dotenv from "dotenv"
import { GoogleGenerativeAI } from "@google/generative-ai"

// ====== LOAD ENV ======
dotenv.config()
const GEMINI_API_KEY = process.env.GEMINI_API_KEY
const ELEVEN_API_KEY = process.env.ELEVEN_API_KEY
const ELEVEN_VOICE_ID = process.env.ELEVEN_VOICE_ID

// ===== Gemini setup =====
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY)
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" })

// ====== GLOBAL STATE ======
const lastCommandTime = {}
let voiceQueue = []
let promoLastTime = 0

// ====== Random Respon ======
const randomResp = {
  text: ["🤔 bentar aku mikir dulu yaa...", "😏 sebentar, lagi loading otak...", "🙄 hmm, menarik nih..."],
  voice: ["🎤 siapin mic dulu yaa...", "🎧 oke aku coba bacain nih...", "😎 nih suaranya moli..."],
  nyanyi: ["🎶 aku coba nyanyi nih...", "🤣 jangan ketawa ya suara aku...", "🎵 oke, mulai nyanyi..."],
  music: ["🎶 musiknya lagi aku setel...", "🎼 tunggu bentar, lagi putar musik...", "🎧 oke musiknya siap nih..."]
}

// ====== HELP COMMAND ======
const helpMenu = `
*🤖 Moli-Bot Command List:*

📝 AI Text
- ketik: *moli [pertanyaan]*
  contoh: moli apa kabar?

🎤 Suara
- ketik: *moli suara [teks]* atau *suara moli*
  contoh: moli suara bacakan puisi

🎶 Nyanyi
- ketik: *moli nyanyi [lagu]* atau *nyanyikan moli*
  contoh: moli nyanyi lagu tidur

🎼 Play Music
- ketik: *moli play music [judul]*
  contoh: moli play music despacito

📣 Panggil User
- ketik: *moli panggil @user*
  contoh: moli panggil @budi

📜 Help / Menu
- ketik: *moli help* atau *moli menu*
`

// ====== ElevenLabs TTS ======
async function textToSpeech(text) {
  const maxChars = 1500
  const finalText = text.slice(0, maxChars)
  const url = `https://api.elevenlabs.io/v1/text-to-speech/${ELEVEN_VOICE_ID}`

  const response = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json", "xi-api-key": ELEVEN_API_KEY },
    body: JSON.stringify({
      text: finalText,
      model_id: "eleven_multilingual_v2",
      voice_settings: { stability: 0.5, similarity_boost: 0.5 }
    })
  })

  if (!response.ok) throw new Error("Gagal request ElevenLabs")

  const buffer = Buffer.from(await response.arrayBuffer())
  const filePath = `./tts_${Date.now()}.mp3`
  fs.writeFileSync(filePath, buffer)

  // Auto delete setelah 10 menit
  setTimeout(() => {
    if (fs.existsSync(filePath)) fs.unlinkSync(filePath)
  }, 10 * 60 * 1000)

  return filePath
}

// ====== Bot Start ======
async function startBot() {
  const { state, saveCreds } = await useMultiFileAuthState("auth")
  const { version } = await fetchLatestBaileysVersion()
  const sock = makeWASocket({
    version,
    auth: state,
    printQRInTerminal: false,
    browser: ["Ubuntu", "Chrome", "22.04.4"]
  })

  sock.ev.on("creds.update", saveCreds)

  // === QR Login ===
  sock.ev.on("connection.update", (update) => {
    const { connection, lastDisconnect, qr } = update
    if (qr) qrcode.generate(qr, { small: true })
    if (connection === "close") {
      const shouldReconnect =
        lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut
      if (shouldReconnect) startBot()
    } else if (connection === "open") {
      console.log("✅ Moli-Bot sudah terhubung ke WhatsApp")
    }
  })

  // ====== Pesan Masuk ======
  sock.ev.on("messages.upsert", async ({ messages }) => {
    const m = messages[0]
    if (!m.message || !m.key.remoteJid) return

    const from = m.key.remoteJid
    const sender = m.key.participant || m.key.remoteJid
    const text =
      m.message.conversation ||
      m.message.extendedTextMessage?.text ||
      ""

    if (!text) return
    const lower = text.toLowerCase()
    console.log("📩 Pesan:", text)

    // Rate Limit 10 detik
    if (lastCommandTime[sender] && Date.now() - lastCommandTime[sender] < 10000) {
      await sock.sendMessage(from, {
        text: `@${sender.split("@")[0]} sabar yaa, tunggu 10 detik dulu 😊`,
        mentions: [sender],
        quoted: m
      })
      return
    }
    lastCommandTime[sender] = Date.now()

    // === Trigger Detection ===
    const isVoice = lower.includes("suara") || lower.includes("bersuara")
    const isNyanyi = lower.includes("nyanyi") || lower.includes("bernyanyi")
    const isMusic = lower.includes("play music")
    const isPanggil = lower.includes("panggil")
    const isHelp = lower.includes("moli help") || lower.includes("moli menu")
    const isText = lower.includes("moli") && !isVoice && !isNyanyi && !isMusic && !isPanggil && !isHelp

    // === Help Command ===
    if (isHelp) {
      await sock.sendMessage(from, { text: helpMenu, quoted: m })
    }

    // === Text Command ===
    else if (isText) {
      const resp = randomResp.text[Math.floor(Math.random() * randomResp.text.length)]
      await sock.sendMessage(from, {
        text: `@${sender.split("@")[0]} ${resp}`,
        mentions: [sender],
        quoted: m
      })

      const prompt = text.replace(/moli/gi, "").trim() || "Halo!"
      const result = await model.generateContent(prompt)
      const replyText = result.response.text()

      await sock.sendMessage(from, {
        text: `@${sender.split("@")[0]} \n${replyText}`,
        mentions: [sender],
        quoted: m
      })
    }

    // === Voice Command ===
    else if (isVoice) {
      voiceQueue.push({ sender, from, m, type: "voice", prompt: text })
      processQueue(sock)
    }

    // === Nyanyi Command ===
    else if (isNyanyi) {
      voiceQueue.push({ sender, from, m, type: "nyanyi", prompt: text })
      processQueue(sock)
    }

    // === Play Music Command ===
    else if (isMusic) {
      voiceQueue.push({ sender, from, m, type: "music", prompt: text })
      processQueue(sock)
    }

    // === Panggil User Command ===
    else if (isPanggil) {
      const mentioned = m.message.extendedTextMessage?.contextInfo?.mentionedJid || []
      if (mentioned.length > 0) {
        await sock.sendMessage(from, {
          text: `Halo ${mentioned.map(u => "@" + u.split("@")[0]).join(", ")} 👋 dipanggil sama temenmu`,
          mentions: mentioned,
          quoted: m
        })
      }
    }
  })

  // === Promo setiap 1 jam di grup ===
  setInterval(async () => {
    const now = Date.now()
    if (now - promoLastTime >= 60 * 60 * 1000) {
      promoLastTime = now
      await sock.sendMessage("1203630xxxxx@g.us", {
        text: "🎉 Promo spesial dari Moli-Bot, jangan ketinggalan ya!"
      })
    }
  }, 60 * 1000)

  // === Jadwal Sholat (contoh setiap jam cek API) ===
  setInterval(async () => {
    try {
      const res = await fetch("https://api.myquran.com/v2/sholat/jadwal/1109/2025-08-19")
      const data = await res.json()
      const jadwal = data.data.jadwal
      await sock.sendMessage("1203630xxxxx@g.us", {
        text: `🕌 Jadwal Sholat Hari Ini (WITA)\nSubuh: ${jadwal.subuh}\nDzuhur: ${jadwal.dzuhur}\nAshar: ${jadwal.ashar}\nMaghrib: ${jadwal.maghrib}\nIsya: ${jadwal.isya}`
      })
    } catch (e) {
      console.log("Gagal ambil jadwal sholat", e)
    }
  }, 60 * 60 * 1000)
}

// ====== Proses Queue ======
async function processQueue(sock) {
  if (voiceQueue.length === 0) return
  const task = voiceQueue.shift()

  const { sender, from, m, type, prompt } = task
  const resp = randomResp[type][Math.floor(Math.random() * randomResp[type].length)]

  await sock.sendMessage(from, {
    text: `@${sender.split("@")[0]} ${resp}`,
    mentions: [sender],
    quoted: m
  })

  const result = await model.generateContent(prompt)
  const voiceText = result.response.text()
  const audioPath = await textToSpeech(voiceText)
  const audioBuffer = fs.readFileSync(audioPath)

  await sock.sendMessage(from, {
    audio: audioBuffer,
    mimetype: "audio/mp4",
    ptt: true,
    mentions: [sender],
    quoted: m
  })

  // Mention antrian setelah selesai
  if (voiceQueue.length > 0) {
    const nextUsers = voiceQueue.map(u => "@" + u.sender.split("@")[0]).join(", ")
    await sock.sendMessage(from, {
      text: `Sekarang giliran kamu ${nextUsers} 🎧`,
      mentions: voiceQueue.map(u => u.sender)
    })
  }
}

startBot()
